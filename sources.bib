@ARTICLE{Wing_90,
  author={J. M. {Wing}},
  journal={Computer},
  title={A specifier's introduction to formal methods},
  year={1990},
  volume={23},
  number={9},
  pages={8-22},
  doi={10.1109/2.58215}
}

@article{Cook_2011,
    doi = {10.1145/1941487.1941509},
    url = {https://doi.org/10.1145%2F1941487.1941509},
    year = 2011,
    month = 5,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {54},
    number = {5},
    pages = {88--98},
    author = {Byron Cook and Andreas Podelski and Andrey Rybalchenko},
    title = {Proving program termination},
    journal = {Communications of the {ACM}}
}

@article{Turing_1937,
    doi = {10.1112/plms/s2-42.1.230},
    url = {https://doi.org/10.1112%2Fplms%2Fs2-42.1.230},
    year = 1937,
    publisher = {Wiley},
    volume = {s2-42},
    number = {1},
    pages = {230--265},
    author = {A. M. Turing},
    title = {On Computable Numbers, with an Application to the Entscheidungsproblem},
    journal = {Proceedings of the London Mathematical Society}
}

@unpublished{EWD:EWD1036,
    author = "Edsger W. Dijkstra",
    title = {On the cruelty of really teaching computing science},
    month = 12,
    year = {1988},
    note = {circulated privately},
    url = {http://www.cs.utexas.edu/users/EWD/ewd10xx/EWD1036.PDF}
}

@inproceedings{McCarthy_67,
    author = {John McCarthy and James Painter},
    title = {Correctness of a compiler for arithmetical expressions},
    year = {1967},
    pages = {33--41},
    publisher = {American Mathematical Society},
    booktitle = {Mathematical Aspects of Computer Science},
    booktitleaddon = {Proceedings of Symposia in Applied Mathematics},
    volume = {19}
}

@inproceedings{Milner_72,
    author = {Robin Milner and R. W. Weyhrauch},
    title = {Proving compiler correctness in a mechanized logic},
    booktitle = {Proceedings 7th Annual Machine Intelligence Workshop},
    volume = {7},
    booktitleaddon = {Machine Intelligence},
    pages = {51--72},
    publisher = {Edinburg University Press},
    year = {1972}
}

@inproceedings{Elphinstone_KK_06,
    author           = {Kevin Elphinstone and Gerwin Klein and Rafal Kolanski},
    editor           = {Rustan Leino},
    month            = 8,
    series           = {Microsoft Research Technical Report MSR-TR-2006-117},
    year             = {2006},
    title            = {Formalising a High-Performance Microkernel},
    address          = {Seattle, USA},
    pages            = {1-7},
    booktitle        = {Workshop on Verified Software: Theories, Tools, and Experiments (VSTTE 06)},
    url              = {https://ts.data61.csiro.au/publications/papers/Elphinstone_KK_06.pdf}
}

@inproceedings{Derrin_EKCC_06,
    author           = {Philip Derrin and Kevin Elphinstone and Gerwin Klein and David Cock and Manuel M. T. Chakravarty},
    month            = 9,
    year             = {2006},
    title            = {Running the Manual: An Approach to High-Assurance Microkernel Development},
    address          = {Portland, OR, USA},
    booktitle        = {Proceedings of the  ACM SIGPLAN Haskell Workshop},
    url              = {https://ts.data61.csiro.au/publications/papers/Derrin_EKCC_06.pdf}
}

@inproceedings{Klein_EHACDEEKNSTW_09,
    author           = {Klein, Gerwin and Elphinstone, Kevin and Heiser, Gernot and Andronick, June and Cock, David and Derrin, Philip and Elkaduwe, Dhammika and Engelhardt, Kai and Kolanski, Rafal and Norrish, Michael and Sewell, Thomas and Tuch, Harvey and Winwood, Simon},
    month            = 10,
    video            = {https://www.sigops.org/s/conferences/sosp/2009/videos/15_gerwin_klein.ogg},
    year             = {2009},
    keywords         = {sel4, microkernel, isabelle, formal verification},
    address          = {Big Sky, MT, USA},
    title            = {{seL4}: Formal Verification of an {OS} Kernel},
    pages            = {207--220},
    booktitle        = {ACM Symposium on Operating Systems Principles},
    url              = {https://ts.data61.csiro.au/publications/nicta_full_text/1852.pdf},
    publisher        = {ACM},
    slides           = {/publications/nicta_slides/1852.pdf}
}

@article{Klein_AEHCDEEKNSTW_10,
    author           = {Klein, Gerwin and Andronick, June and Elphinstone, Kevin and Heiser, Gernot and Cock, David and Derrin, Philip and Elkaduwe, Dhammika and Engelhardt, Kai and Kolanski, Rafal and Norrish, Michael and Sewell, Thomas and Tuch, Harvey and Winwood, Simon},
    doi              = {10.1145/1743546.1743574},
    number           = {6},
    month            = 6,
    year             = {2010},
    keywords         = {sel4, microkernel, verification},
    title            = {{seL4}: Formal Verification of an Operating-System Kernel},
    volume           = {53},
    pages            = {107--115},
    journal          = {Communications of the ACM},
    url              = {https://ts.data61.csiro.au/publications/nicta_full_text/3783.pdf}
}

@phdthesis{Sewell:phd,
    author           = {Thomas Sewell},
    month            = 7,
    year             = {2017},
    title            = {Translation Validation for Verified, Efficient and Timely Operating Systems},
    address          = {Sydney, Australia},
    keywords         = {translation validation; verification; wcet; timing; C; compiler; operating systems},
    url              = {https://ts.data61.csiro.au/publications/papers/Sewell:phd.pdf},
    school           = {UNSW}
}

@article{Klein_AEMSKH_14,
    author           = {Klein, Gerwin and Andronick, June and Elphinstone, Kevin and Murray, Toby and Sewell, Thomas and Kolanski, Rafal and Heiser, Gernot},
    doi              = {10.1145/2560537},
    number           = {1},
    month            = 2,
    year             = {2014},
    keywords         = {sel4, isabelle/hol, verification, microkernel},
    title            = {Comprehensive Formal Verification of an {OS} Microkernel},
    volume           = {32},
    pages            = {2:1-2:70},
    journal          = {ACM Transactions on Computer Systems},
    url              = {https://ts.data61.csiro.au/publications/nicta_full_text/7371.pdf}
}

@inproceedings{Sewell_KH_16,
    author           = {Sewell, Thomas and Kam, Felix and Heiser, Gernot},
    month            = 4,
    year             = {2016},
    keywords         = {wcet, sel4, real-time, translation validation},
    address          = {Vienna, Austria},
    title            = {Complete, High-Assurance Determination of Loop Bounds and Infeasible Paths for {WCET} Analysis},
    booktitle        = {IEEE Real-Time and Embedded Technology and Applications Symposium (RTAS)},
    url              = {https://ts.data61.csiro.au/publications/nicta_full_text/9118.pdf}
}

@article{Sewell_2013,
    doi = {10.1145/2499370.2462183},
    url = {https://doi.org/10.1145%2F2499370.2462183},
    year = 2013,
    month = 6,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {48},
    number = {6},
    pages = {471--482},
    author = {Thomas Arthur Leck Sewell and Magnus O. Myreen and Gerwin Klein},
    title = {Translation validation for a verified {OS} kernel},
    journal = {{ACM} {SIGPLAN} Notices}
}

@techreport{Cofer_BGDWKKHPFPSGW_17:tr,
    author           = {Cofer, Darren and Backes, John and Gacek, Andrew and DaCosta, Daniel and Whalen, Michael and Kuz, Ihor and Klein, Gerwin and Heiser, Gernot and Pike, Lee and Foltzer, Adam and Podhradsky, Michael and Stuart, Douglas and Graham, Jason and Wilson, Brett},
    month            = 9,
    date             = {2017-9-27},
    year             = {2017},
    title            = {Secure Mathematically-Assured Composition of Control Models},
    numpages         = {314},
    institution      = {Data61, CSIRO},
    url              = {https://ts.data61.csiro.au/publications/csiro_full_text//Cofer_BGDWKKHPFPSGW_17:tr.pdf},
    publisher        = {USA Department of Defence}
}

@article{Klein_AKMHF_18,
    issn             = {0001-0782},
    author           = {Klein, Gerwin and Andronick, June and Kuz, Ihor and Murray, Toby and Heiser, Gernot and Fernandez, Matthew},
    month            = 10,
    date             = {2018-10-1},
    doi              = {https://doi.org/10.1145/3230627},
    year             = {2018},
    title            = {Formally Verified Software in the Real World},
    pages            = {68-77},
    volume           = {61},
    journal          = {Communications of the ACM},
    url              = {https://ts.data61.csiro.au/publications/csiro_full_text//Klein_AKMHF_18.pdf},
    issue            = {10},
    publisher        = {ACM}
}

@inproceedings {258969,
    author = {Travis Hance and Andrea Lattuada and Chris Hawblitzel and Jon Howell and Rob Johnson and Bryan Parno},
    title = {Storage Systems are Distributed Systems (So Verify Them That Way!)},
    booktitle = {14th {USENIX} Symposium on Operating Systems Design and Implementation ({OSDI} 20)},
    year = {2020},
    isbn = {978-1-939133-19-9},
    pages = {99--115},
    url = {https://www.usenix.org/conference/osdi20/presentation/hance},
    publisher = {{USENIX} Association},
    month = 11,
}

@InProceedings{hawblitzel2014ironclad,
    author = {Hawblitzel, Chris and Howell, Jon and Lorch, Jay and Narayan, Arjun and Parno, Bryan and Zhang, Danfeng and Zill, Brian},
    title = {Ironclad Apps: End-to-End Security via Automated Full-System Verification},
    booktitle = {USENIX Symposium on Operating Systems Design and Implementation (OSDI)},
    year = {2014},
    month = {October},
    abstract = {An Ironclad App lets a user securely transmit her data to a remote machine with the guarantee that every instruction executed on that machine adheres to a formal abstract specification of the app’s behavior. This does more than eliminate implementation vulnerabilities such as buffer overflows, parsing errors, or data leaks; it tells the user exactly how the app will behave at all times. We provide these guarantees via complete, low-level software verification. We then use cryptography and secure hardware to enable secure channels from the verified software to remote users. To achieve such complete verification, we developed a set of new and modified tools, a collection of techniques and engineering disciplines, and a methodology focused on rapid development of verified systems software. We describe our methodology, formal results, and lessons we learned from building a full stack of verified software. That software includes a verified kernel; verified drivers; verified system and crypto libraries including SHA, HMAC, and RSA; and four Ironclad Apps.},
    publisher = {USENIX - Advanced Computing Systems Association},
    url = {https://www.microsoft.com/en-us/research/publication/ironclad-apps-end-to-end-security-via-automated-full-system-verification/},
    edition = {USENIX Symposium on Operating Systems Design and Implementation (OSDI)},
}

@InProceedings{hawblitzel2015ironfleet,
    author = {Hawblitzel, Chris and Howell, Jon and Kapritsos, Manos and Lorch, Jay and Parno, Bryan and Stephenson, Justine and Setty, Srinath and Zill, Brian},
    title = {IronFleet: Proving Practical Distributed Systems Correct},
    booktitle = {Proceedings of the ACM Symposium on Operating Systems Principles (SOSP)},
    year = {2015},
    month = {October},
    abstract = {Distributed systems are notorious for harboring subtle bugs. Verification can, in principle, eliminate these bugs a priori, but verification has historically been difficult to apply at full-program scale, much less distributed-system scale. We describe a methodology for building practical and provably correct distributed systems based on a unique blend of TLA-style state-machine refinement and Hoare-logic verification. We demonstrate the methodology on a complex implementation of a Paxos-based replicated state machine library and a lease-based sharded key-value store. We prove that each obeys a concise safety specification, as well as desirable liveness requirements. Each implementation achieves performance competitive with a reference system. With our methodology and lessons learned, we aim to raise the standard for distributed systems from "tested" to "correct."},
    publisher = {ACM - Association for Computing Machinery},
    url = {https://www.microsoft.com/en-us/research/publication/ironfleet-proving-practical-distributed-systems-correct/},
    edition = {Proceedings of the ACM Symposium on Operating Systems Principles (SOSP)},
}

@InProceedings{yang2010safe,
    author = {Yang, Jean and Hawblitzel, Chris},
    title = {Safe to the Last Instruction: Automated Verification of a Type-Safe Operating System},
    booktitle = {PLDI},
    year = {2010},
    month = {June},
    abstract = {Typed assembly language (TAL) and Hoare logic can verify the absence of many kinds of errors in low-level code.We use TAL and Hoare logic to achieve highly automated, static verification of the safety of a new operating system called Verve. Our techniques and tools mechanically verify the safety of every assembly language instruction in the operating system, run-time system, drivers, and applications (in fact, every part of the system software except the boot loader). Verve consists of a “Nucleus” that provides primitive access to hardware and memory, a kernel that builds services on top of the Nucleus, and applications that run on top of the kernel. The Nucleus, written in verified assembly language, implements allocation, garbage collection, multiple stacks, interrupt handling, and device access. The kernel, written in C# and compiled to TAL, builds higher-level services, such as preemptive threads, on top of the Nucleus. A TAL checker verifies the safety of the kernel and applications. A Hoare-style verifier with an automated theorem prover verifies both the safety and correctness of the Nucleus. Verve is, to the best of our knowledge, the first operating system mechanically verified to guarantee both type and memory safety. More generally, Verve’s approach demonstrates a practical way to mix high-level typed code with low-level untyped code in a verifiably safe manner.},
    publisher = {Association for Computing Machinery, Inc.},
    url = {https://www.microsoft.com/en-us/research/publication/safe-to-the-last-instruction-automated-verification-of-a-type-safe-operating-system/},
    edition = {PLDI},
    note = {best paper},
}

@article{Lopes_2018,
    doi = {10.1145/3166064},
    url = {https://doi.org/10.1145%2F3166064},
    year = 2018,
    month = 1,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {61},
    number = {2},
    pages = {84--91},
    author = {Nuno P. Lopes and David Menendez and Santosh Nagarakatte and John Regehr},
    title = {Practical verification of peephole optimizations with Alive},
    journal = {Communications of the {ACM}}
}

@inproceedings{Lim_2017,
    doi = {10.1145/3139337.3139343},
    url = {https://doi.org/10.1145%2F3139337.3139343},
    year = 2017,
    month = 10,
    publisher = {{ACM}},
    author = {Jay P. Lim and Vinod Ganapathy and Santosh Nagarakatte},
    title = {Compiler Optimizations with Retrofitting Transformations},
    booktitle = {Proceedings of the 2017 Workshop on Programming Languages and Analysis for Security}
}

@incollection{Menendez_2016,
    doi = {10.1007/978-3-662-53413-7_16},
    url = {https://doi.org/10.1007%2F978-3-662-53413-7_16},
    year = 2016,
    publisher = {Springer Berlin Heidelberg},
    pages = {317--337},
    author = {David Menendez and Santosh Nagarakatte and Aarti Gupta},
    title = {Alive-{FP}: Automated Verification of Floating Point Based Peephole Optimizations in {LLVM}},
    booktitle = {Static Analysis}
}

@inproceedings{Lopes_2015,
    doi = {10.1145/2737924.2737965},
    url = {https://doi.org/10.1145%2F2737924.2737965},
    year = 2015,
    month = 6,
    publisher = {{ACM}},
    author = {Nuno P. Lopes and David Menendez and Santosh Nagarakatte and John Regehr},
    title = {Provably correct peephole optimizations with Alive},
    booktitle = {Proceedings of the 36th {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation}
}

@article{Zhao_2013,
    doi = {10.1145/2499370.2462164},
    url = {https://doi.org/10.1145%2F2499370.2462164},
    year = 2013,
    month = 6,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {48},
    number = {6},
    pages = {175--186},
    author = {Jianzhou Zhao and Santosh Nagarakatte and Milo M.K. Martin and Steve Zdancewic},
    title = {Formal verification of {SSA}-based optimizations for {LLVM}},
    journal = {{ACM} {SIGPLAN} Notices}
}

@article{Zhao_2012,
    doi = {10.1145/2103621.2103709},
    url = {https://doi.org/10.1145%2F2103621.2103709},
    year = 2012,
    month = 1,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {47},
    number = {1},
    pages = {427--440},
    author = {Jianzhou Zhao and Santosh Nagarakatte and Milo M.K. Martin and Steve Zdancewic},
    title = {Formalizing the {LLVM} intermediate representation for verified program transformations},
    journal = {{ACM} {SIGPLAN} Notices}
}

@inproceedings{Narayanan_2019,
    doi = {10.1145/3317550.3321449},
    url = {https://doi.org/10.1145%2F3317550.3321449},
    year = 2019,
    month = 5,
    publisher = {{ACM}},
    author = {Vikram Narayanan and Marek S. Baranowski and Leonid Ryzhyk and Zvonimir Rakamari{\'{c}} and Anton Burtsev},
    title = {{RedLeaf}},
    booktitle = {Proceedings of the Workshop on Hot Topics in Operating Systems}
}

@inproceedings{Narayan_2020,
    author = {Vikram Narayanan and Tianjiao Huang and David Detweiler and Dan Appel and Zhaofeng Li and Gerd Zellweger and Anton Burtsev},
    title = {RedLeaf: Isolation and Communication in a Safe Operating System},
    booktitle = {14th {USENIX} Symposium on Operating Systems Design and Implementation ({OSDI} 20)},
    year = {2020},
    isbn = {978-1-939133-19-9},
    pages = {21--39},
    url = {https://www.usenix.org/conference/osdi20/presentation/narayanan-vikram},
    publisher = {{USENIX} Association},
    month = 11,
}

@thesis{Appel_2020,
    author = {Dan Appel},
    title = {Inter-Process Communication in a Safe Kernel},
    year = {2020},
    month = 9,
    url = {https://www.ics.uci.edu/~aburtsev/doc/appel-bs-thesis.pdf},
    school = {University of California, Irvine},
    type = {BS thesis}
}

@InProceedings{sturton-memocode13,
    author = {Cynthia Sturton and Rohit Sinha and Thurston H.Y. Dang and Sakshi Jain and Michael McCoyd and Wei-Yang Tan and Petros Maniatis and Sanjit A. Seshia and David Wagner},
    title = {Symbolic Software Model Validation},
    booktitle = {Proceedings of the 10th ACM/IEEE International Conference on Formal Methods and Models for Codesign (MEMOCODE)},
    month = 10,
    year = {2013}
}

@phdthesis{Sturton_2013,
    author = {Cynthia Sturton},
    title = {Secure Virtualization with Formal Methods},
    year = {2013},
    month = 12,
    url = {https://www2.eecs.berkeley.edu/Pubs/TechRpts/2013/EECS-2013-224.pdf},
    school = {University of California, Berkeley},
}

@inproceedings{Bradfield_2016,
    doi = {10.1109/hst.2016.7495566},
    url = {https://doi.org/10.1109%2Fhst.2016.7495566},
    year = 2016,
    month = 5,
    publisher = {{IEEE}},
    author = {Chris Bradfield and Cynthia Sturton},
    title = {Model checking to find vulnerabilities in an instruction set architecture},
    booktitle = {2016 {IEEE} International Symposium on Hardware Oriented Security and Trust ({HOST})}
}

@inproceedings{chi2017system,
    author={Andrew Chi and Robby A. Cochran and Marie Nesfield and Cynthia Sturton and Mike K. Reiter},
    title={A System to Verify Network Behavior of Known Cryptographic Clients},
    booktitle={Proceedings of the Symposium on Networked Systems Design and Implementation (NSDI)},
    year={2017},
    publisher={USENIX}
}

@inproceedings{zhang2017identifying,
    author={Rui Zhang and Natalie Stanley and Chris Griggs and Andrew Chi and Cynthia Sturton},
    title={Identifying Security Critical Properties for the Dynamic Verification of a Processor},
    booktitle={Proceedings of the 22nd International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)},
    year={2017},
    publisher={ACM}
}

@inproceedings{zhang2018recursive,
    author={Rui Zhang and Cynthia Sturton},
    title={A Recursive Strategy for Symbolic Execution to Find Exploits in Hardware Designs},
    booktitle={Proceedings of the International Workshop on Formal Methods and Security (FMS)},
    year={2018},
    publisher={ACM}
}

@inproceedings{zhang2018end,
    author={Rui Zhang and Calvin Deutschbein and Peng Huang and Cynthia Sturton},
    title={End-to-End Automated Exploit Generation for Validating the Security of Processor Designs},
    booktitle={Proceedings of the International Symposium on Microarchitecture (MICRO)},
    year={2018},
    publisher={IEEE/ACM}
}

@inproceedings{Noonan_2018,
    doi = {10.1145/3242744.3242755},
    url = {https://doi.org/10.1145%2F3242744.3242755},
    year = 2018,
    month = 9,
    publisher = {{ACM}},
    author = {Matt Noonan},
    title = {Ghosts of departed proofs (functional pearl)},
    booktitle = {Proceedings of the 11th {ACM} {SIGPLAN} International Symposium on Haskell}
}

@InProceedings{leino2010dafny,
    author = {Leino, Rustan},
    title = {Dafny: An Automatic Program Verifier for Functional Correctness},
    booktitle = {16th International Conference, LPAR-16, Dakar, Senegal},
    year = {2010},
    month = 4,
    abstract = {Traditionally, the full verification of a program’s functional correctness has been obtained with pen and paper or with interactive proof assistants, whereas only reduced verification tasks, such as extended static checking, have enjoyed the automation offered by satisfiability-modulo-theories (SMT) solvers. More recently, powerful SMT solvers and well-designed program verifiers are starting to break that tradition, thus reducing the effort involved in doing full verification. This paper gives a tour of the language and verifier Dafny, which has been used to verify the functional correctness of a number of challenging pointer-based programs. The paper describes the features incorporated in Dafny, illustrating their use by small examples and giving a taste of how they are coded for an SMT solver. As a larger case study, the paper shows the full functional specification of the Schorr-Waite algorithm in Dafny.},
    publisher = {Springer Berlin Heidelberg},
    url = {https://www.microsoft.com/en-us/research/publication/dafny-automatic-program-verifier-functional-correctness-2/},
    pages = {348-370},
    edition = {16th International Conference, LPAR-16, Dakar, Senegal},
}

@InProceedings{leino2008specification,
    author = {Leino, Rustan},
    title = {Specification and Verification of Object-Oriented Software},
    booktitle = {Marktoberdorf International Summer School 2008},
    year = {2008},
    month = 6,
    abstract = {The specification of object-oriented and other pointer-based programs must be able to describe the structure of the program’s dynamically allocated data as well as some abstract view of what the code implements. The verification of such programs can be done by generating logical verification conditions from the program and its specifications and then analyzing the verification conditions by a mechanical theorem prover. In these lecture notes, I present an object-based language, Dafny, whose specifications use the style of dynamic frames. I show how to write and specify programs in Dafny. Most of the material is devoted to how to build a first-order automatic program verifier for Dafny programs, generating the verification conditions as input to an automatic satisfiability-modulo-theories solver.},
    url = {https://www.microsoft.com/en-us/research/publication/specification-verification-object-oriented-software/},
    edition = {Marktoberdorf International Summer School 2008},
}

@techreport{leino2013co-induction,
    author = {Leino, Rustan and Moskal, Michal},
    title = {Co-Induction Simply: Automatic Co-Inductive Proofs in a Program Verifier},
    year = {2013},
    month = 7,
    abstract = {Program verification relies heavily on induction, which has received decades of attention in mechanical verification tools. When program correctness is best described by infinite structures, program verification is usefully aided also by co-induction, which has not benefited from the same degree of tool support. Co-induction is complicated to work with in interactive proof assistants and has had no previous support in dedicated program verifiers. This paper shows that an SMT-based program verifier can support reasoning about co-induction—handling infinite data structures, lazy function calls, and user-defined properties defined as greatest fix-points, as well as letting users write co-inductive proofs. Moreover, the support can be packaged to provide a simple user experience. The paper describes the features for co-induction in the language and verifier Dafny, defines their translation into input for a first-order SMT solver, and reports on some encouraging initial experience.},
    publisher = {Microsoft Research},
    url = {https://www.microsoft.com/en-us/research/publication/co-induction-simply-automatic-co-inductive-proofs-in-a-program-verifier/},
    number = {MSR-TR-2013-49},
}

@article{Davis_1962,
    doi = {10.1145/368273.368557},
    url = {https://doi.org/10.1145%2F368273.368557},
    year = 1962,
    month = 7,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {5},
    number = {7},
    pages = {394--397},
    author = {Martin Davis and George Logemann and Donald Loveland},
    title = {A machine program for theorem-proving},
    journal = {Communications of the {ACM}}
}

@article{Davis_1960,
    doi = {10.1145/321033.321034},
    url = {https://doi.org/10.1145%2F321033.321034},
    year = 1960,
    month = 7,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {7},
    number = {3},
    pages = {201--215},
    author = {Martin Davis and Hilary Putnam},
    title = {A Computing Procedure for Quantification Theory},
    journal = {Journal of the {ACM}}
}

@article{Gilmore_1960,
    doi = {10.1147/rd.41.0028},
    url = {https://doi.org/10.1147%2Frd.41.0028},
    year = 1960,
    month = 1,
    publisher = {{IBM}},
    volume = {4},
    number = {1},
    pages = {28--35},
    author = {P. C. Gilmore},
    title = {A Proof Method for Quantification Theory: Its Justification and Realization},
    journal = {{IBM} Journal of Research and Development}
}


@InProceedings{Porncharoenwase_2020,
    author = {Porncharoenwase, Sorawee and Bornholt, James and Torlak, Emina},
    editor = {Beyer, Dirk and Zufferey, Damien},
    title = {Fixing Code that Explodes Under Symbolic Evaluation},
    booktitle = {Verification, Model Checking, and Abstract Interpretation},
    year = {2020},
    publisher = {Springer International Publishing},
    address = {Cham},
    pages = {44--67},
    abstract = {Effective symbolic evaluation is key to building scalable verification and synthesis tools based on SMT solving. These tools use symbolic evaluators to reduce the semantics of all paths through a finite program to logical constraints, discharged with an SMT solver. Using an evaluator effectively requires tool developers to be able to identify and repair performance bottlenecks in code under all-path evaluation, a difficult task, even for experts. This paper presents a new method for repairing such bottlenecks automatically. The key idea is to formulate the symbolic performance repair problem as combinatorial search through a space of semantics-preserving transformations, or repairs, to find an equivalent program with minimal cost under symbolic evaluation. The key to realizing this idea is (1) defining a small set of generic repairs that can be combined to fix common bottlenecks, and (2) searching for combinations of these repairs to find good solutions quickly and best ones eventually. Our technique, SymFix, contributes repairs based on deforestation and symbolic reflection, and an efficient algorithm that uses symbolic profiling to guide the search for fixes. To evaluate SymFix, we implement it for the Rosette solver-aided language and symbolic evaluator. Applying SymFix to 18 published verification and synthesis tools built in Rosette, we find that it automatically improves the performance of 12 tools by a factor of 1.1 {\$}{\$}{\backslash}times {\$}{\$}--91.7 {\$}{\$}{\backslash}times {\$}{\$}, and 4 of these fixes match or outperform expert-written repairs. SymFix also finds 5 fixes that were missed by experts.},
    isbn = {978-3-030-39322-9}
}

@article{Bornholt_2018,
    doi = {10.1145/3276519},
    url = {https://doi.org/10.1145%2F3276519},
    year = 2018,
    month = 10,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {2},
    number = {{OOPSLA}},
    pages = {1--26},
    author = {James Bornholt and Emina Torlak},
    title = {Finding code that explodes under symbolic evaluation},
    journal = {Proceedings of the {ACM} on Programming Languages}
}

@article{Chang_2018,
    doi = {10.1145/3158128},
    url = {https://doi.org/10.1145%2F3158128},
    year = 2018,
    month = 1,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {2},
    number = {{POPL}},
    pages = {1--29},
    author = {Stephen Chang and Alex Knauth and Emina Torlak},
    title = {Symbolic types for lenient symbolic execution},
    journal = {Proceedings of the {ACM} on Programming Languages}
}

@article{Torlak_2014,
    doi = {10.1145/2666356.2594340},
    url = {https://doi.org/10.1145%2F2666356.2594340},
    year = 2014,
    month = 6,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {49},
    number = {6},
    pages = {530--541},
    author = {Emina Torlak and Rastislav Bodik},
    title = {A lightweight symbolic virtual machine for solver-aided host languages},
    journal = {{ACM} {SIGPLAN} Notices}
}

@inproceedings{Torlak_2013,
    doi = {10.1145/2509578.2509586},
    url = {https://doi.org/10.1145%2F2509578.2509586},
    year = 2013,
    publisher = {{ACM} Press},
    author = {Emina Torlak and Rastislav Bodik},
    title = {Growing solver-aided languages with rosette},
    booktitle = {Proceedings of the 2013 {ACM} international symposium on New ideas, new paradigms, and reflections on programming {\&} software - Onward! {\textquotesingle}13}
}

@inproceedings{Nelson_2019,
    doi = {10.1145/3341301.3359641},
    url = {https://doi.org/10.1145%2F3341301.3359641},
    year = 2019,
    month = 10,
    publisher = {{ACM}},
    author = {Luke Nelson and James Bornholt and Ronghui Gu and Andrew Baumann and Emina Torlak and Xi Wang},
    title = {Scaling symbolic evaluation for automated verification of systems code with Serval},
    booktitle = {Proceedings of the 27th {ACM} Symposium on Operating Systems Principles}
}

@inproceedings{Chajed_2019,
    doi = {10.1145/3341301.3359632},
    url = {https://doi.org/10.1145%2F3341301.3359632},
    year = 2019,
    month = 10,
    publisher = {{ACM}},
    author = {Tej Chajed and Joseph Tassarotti and M. Frans Kaashoek and Nickolai Zeldovich},
    title = {Verifying concurrent, crash-safe systems with Perennial},
    booktitle = {Proceedings of the 27th {ACM} Symposium on Operating Systems Principles}
}

@inproceedings{Zou_2019,
    doi = {10.1145/3341301.3359644},
    url = {https://doi.org/10.1145%2F3341301.3359644},
    year = 2019,
    month = 10,
    publisher = {{ACM}},
    author = {Mo Zou and Haoran Ding and Dong Du and Ming Fu and Ronghui Gu and Haibo Chen},
    title = {Using concurrent relational logic with helpers for verifying the {AtomFS} file system},
    booktitle = {Proceedings of the 27th {ACM} Symposium on Operating Systems Principles}
}

@inproceedings{Zaostrovnykh_2019,
    doi = {10.1145/3341301.3359647},
    url = {https://doi.org/10.1145%2F3341301.3359647},
    year = 2019,
    month = 10,
    publisher = {{ACM}},
    author = {Arseniy Zaostrovnykh and Solal Pirelli and Rishabh Iyer and Matteo Rizzo and Luis Pedrosa and Katerina Argyraki and George Candea},
    title = {Verifying software network functions with no verification expertise},
    booktitle = {Proceedings of the 27th {ACM} Symposium on Operating Systems Principles}
}

@inproceedings{Nelson_2017,
    doi = {10.1145/3132747.3132748},
    url = {https://doi.org/10.1145%2F3132747.3132748},
    year = 2017,
    month = 10,
    publisher = {{ACM}},
    author = {Luke Nelson and Helgi Sigurbjarnarson and Kaiyuan Zhang and Dylan Johnson and James Bornholt and Emina Torlak and Xi Wang},
    title = {Hyperkernel},
    booktitle = {Proceedings of the 26th Symposium on Operating Systems Principles}
}

@inproceedings{Chen_2017,
    doi = {10.1145/3132747.3132776},
    url = {https://doi.org/10.1145%2F3132747.3132776},
    year = 2017,
    month = 10,
    publisher = {{ACM}},
    author = {Haogang Chen and Tej Chajed and Alex Konradi and Stephanie Wang and Atalay {\.{I}}leri and Adam Chlipala and M. Frans Kaashoek and Nickolai Zeldovich},
    title = {Verifying a high-performance crash-safe file system using a tree specification},
    booktitle = {Proceedings of the 26th Symposium on Operating Systems Principles}
}

@inproceedings{Ferraiuolo_2017,
    doi = {10.1145/3132747.3132782},
    url = {https://doi.org/10.1145%2F3132747.3132782},
    year = 2017,
    month = 10,
    publisher = {{ACM}},
    author = {Andrew Ferraiuolo and Andrew Baumann and Chris Hawblitzel and Bryan Parno},
    title = {Komodo},
    booktitle = {Proceedings of the 26th Symposium on Operating Systems Principles}
}

@inproceedings{Chen_2015,
    doi = {10.1145/2815400.2815402},
    url = {https://doi.org/10.1145%2F2815400.2815402},
    year = 2015,
    month = 10,
    publisher = {{ACM}},
    author = {Haogang Chen and Daniel Ziegler and Tej Chajed and Adam Chlipala and M. Frans Kaashoek and Nickolai Zeldovich},
    title = {Using Crash Hoare logic for certifying the {FSCQ} file system},
    booktitle = {Proceedings of the 25th Symposium on Operating Systems Principles}
}

@inproceedings{Ridge_2015,
    doi = {10.1145/2815400.2815411},
    url = {https://doi.org/10.1145%2F2815400.2815411},
    year = 2015,
    month = 10,
    publisher = {{ACM}},
    author = {Tom Ridge and David Sheets and Thomas Tuerk and Andrea Giugliano and Anil Madhavapeddy and Peter Sewell},
    title = {{SibylFS}},
    booktitle = {Proceedings of the 25th Symposium on Operating Systems Principles}
}

@inproceedings{Braun_2013,
    doi = {10.1145/2517349.2522733},
    url = {https://doi.org/10.1145%2F2517349.2522733},
    year = 2013,
    month = 11,
    publisher = {{ACM}},
    author = {Benjamin Braun and Ariel J. Feldman and Zuocheng Ren and Srinath Setty and Andrew J. Blumberg and Michael Walfish},
    title = {Verifying computations with state},
    booktitle = {Proceedings of the Twenty-Fourth {ACM} Symposium on Operating Systems Principles}
}

@inproceedings {258848,
    author = {Luke Nelson and Jacob Van Geffen and Emina Torlak and Xi Wang},
    title = {Specification and verification in the field: Applying formal methods to {BPF} just-in-time compilers in the Linux kernel},
    booktitle = {14th {USENIX} Symposium on Operating Systems Design and Implementation ({OSDI} 20)},
    year = {2020},
    isbn = {978-1-939133-19-9},
    pages = {41--61},
    url = {https://www.usenix.org/conference/osdi20/presentation/nelson},
    publisher = {{USENIX} Association},
    month = 11,
}

@inproceedings {222565,
    author = {Tej Chajed and Frans Kaashoek and Butler Lampson and Nickolai Zeldovich},
    title = {Verifying concurrent software using movers in {CSPEC}},
    booktitle = {13th {USENIX} Symposium on Operating Systems Design and Implementation ({OSDI} 18)},
    year = {2018},
    isbn = {978-1-939133-08-3},
    address = {Carlsbad, CA},
    pages = {306--322},
    url = {https://www.usenix.org/conference/osdi18/presentation/chajed},
    publisher = {{USENIX} Association},
    month = 10,
}

@inproceedings {222621,
    author = {Srinath Setty and Sebastian Angel and Trinabh Gupta and Jonathan Lee},
    title = {Proving the correct execution of concurrent services in zero-knowledge},
    booktitle = {13th {USENIX} Symposium on Operating Systems Design and Implementation ({OSDI} 18)},
    year = {2018},
    isbn = {978-1-939133-08-3},
    address = {Carlsbad, CA},
    pages = {339--356},
    url = {https://www.usenix.org/conference/osdi18/presentation/setty},
    publisher = {{USENIX} Association},
    month = 10,
}

@inproceedings {199344,
    author = {Ronghui Gu and Zhong Shao and Hao Chen and Xiongnan (Newman) Wu and Jieung Kim and Vilhelm Sj{\"o}berg and David Costanzo},
    title = {CertiKOS: An Extensible Architecture for Building Certified Concurrent {OS} Kernels},
    booktitle = {12th {USENIX} Symposium on Operating Systems Design and Implementation ({OSDI} 16)},
    year = {2016},
    isbn = {978-1-931971-33-1},
    address = {Savannah, GA},
    pages = {653--669},
    url = {https://www.usenix.org/conference/osdi16/technical-sessions/presentation/gu},
    publisher = {{USENIX} Association},
    month = 11,
}

@inproceedings {186144,
    author = {Xi Wang and David Lazar and Nickolai Zeldovich and Adam Chlipala and Zachary Tatlock},
    title = {Jitk: A Trustworthy In-Kernel Interpreter Infrastructure},
    booktitle = {11th {USENIX} Symposium on Operating Systems Design and Implementation ({OSDI} 14)},
    year = {2014},
    isbn = { 978-1-931971-16-4},
    address = {Broomfield, CO},
    pages = {33--47},
    url = {https://www.usenix.org/conference/osdi14/technical-sessions/presentation/wang_xi},
    publisher = {{USENIX} Association},
    month = 10,
}

@inproceedings{Necula_2000,
    doi = {10.1145/349299.349314},
    url = {https://doi.org/10.1145%2F349299.349314},
    year = 2000,
    publisher = {{ACM} Press},
    author = {George C. Necula},
    title = {Translation validation for an optimizing compiler},
    booktitle = {Proceedings of the {ACM} {SIGPLAN} 2000 conference on Programming language design and implementation  - {PLDI} {\textquotesingle}00}
}

@InProceedings{Pnueli_1998,
    author={Pnueli, A.  and Siegel, M.  and Singerman, E.},
    editor={Steffen, Bernhard},
    title={Translation validation},
    booktitle={Tools and Algorithms for the Construction and Analysis of Systems},
    year={1998},
    publisher={Springer Berlin Heidelberg},
    address={Berlin, Heidelberg},
    pages={151--166},
    abstract={We present the notion of translation validation as a new approach to the verification of translators (compilers, code generators). Rather than proving in advance that the compiler always produces a target code which correctly implements the source code (compiler verification), each individual translation (i.e. a run of the compiler) is followed by a validation phase which verifies that the target code produced on this run correctly implements the submitted source program. Several ingredients are necessary to set up the --- fully automatic --- translation validation process, among which are:1.A common semantic framework for the representation of the source code and the generated target code.2.A formalization of the notion of ``correct implementation'' as a refinement relation.3.A syntactic simulation-based proof method which allows to automatically verify that one model of the semantic framework, representing the produced target code, correctly implements another model which represents the source.},
    isbn={978-3-540-69753-4}
}

@misc{moy2020corpse,
    title={Corpse Reviver: Sound and Efficient Gradual Typing via Contract Verification},
    author={Cameron Moy and Phúc C. Nguyen and Sam Tobin-Hochstadt and David Van Horn},
    year={2020},
    eprint={2007.12630},
    archivePrefix={arXiv},
    primaryClass={cs.PL}
}

@article{Morrisett_2012,
    doi = {10.1145/2345156.2254111},
    url = {https://doi.org/10.1145%2F2345156.2254111},
    year = 2012,
    month = 8,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {47},
    number = {6},
    pages = {395--404},
    author = {Greg Morrisett and Gang Tan and Joseph Tassarotti and Jean-Baptiste Tristan and Edward Gan},
    title = {{RockSalt}},
    journal = {{ACM} {SIGPLAN} Notices}
}

@article{Jung_2018a,
    doi = {10.1145/3158154},
    url = {https://doi.org/10.1145%2F3158154},
    year = 2018,
    month = 1,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {2},
    number = {{POPL}},
    pages = {1--34},
    author = {Ralf Jung and Jacques-Henri Jourdan and Robbert Krebbers and Derek Dreyer},
    title = {{RustBelt}: securing the foundations of the rust programming language},
    journal = {Proceedings of the {ACM} on Programming Languages}
}

@inproceedings{Jung_2015,
    doi = {10.1145/2676726.2676980},
    url = {https://doi.org/10.1145%2F2676726.2676980},
    year = 2015,
    month = 1,
    publisher = {{ACM}},
    author = {Ralf Jung and David Swasey and Filip Sieczkowski and Kasper Svendsen and Aaron Turon and Lars Birkedal and Derek Dreyer},
    title = {Iris: Monoids and Invariants as an Orthogonal Basis for Concurrent Reasoning},
    titleaddon = {``Iris 1.0''},
    booktitle = {Proceedings of the 42nd Annual {ACM} {SIGPLAN}-{SIGACT} Symposium on Principles of Programming Languages}
}

@inproceedings{Jung_2016,
    doi = {10.1145/2951913.2951943},
    url = {https://doi.org/10.1145%2F2951913.2951943},
    year = 2016,
    month = 9,
    publisher = {{ACM}},
    author = {Ralf Jung and Robbert Krebbers and Lars Birkedal and Derek Dreyer},
    title = {Higher-order ghost state},
    titleaddon = {``Iris 2.0''},
    booktitle = {Proceedings of the 21st {ACM} {SIGPLAN} International Conference on Functional Programming}
}

@online{Jung_2016_slides,
    url = {https://people.mpi-sws.org/~jung/iris/talk-icfp2016.pdf},
    year = {2016},
    author = {Ralf Jung and Robbert Krebbers and Lars Birkedal and Derek Dreyer},
    title = {Higher-Order Ghost State Presentation}
}

@incollection{Krebbers_2017,
    doi = {10.1007/978-3-662-54434-1_26},
    url = {https://doi.org/10.1007%2F978-3-662-54434-1_26},
    year = 2017,
    publisher = {Springer Berlin Heidelberg},
    pages = {696--723},
    author = {Robbert Krebbers and Ralf Jung and Ale{\v{s}} Bizjak and Jacques-Henri Jourdan and Derek Dreyer and Lars Birkedal},
    title = {The Essence of Higher-Order Concurrent Separation Logic},
    titleaddon = {``Iris 3.0''},
    booktitle = {Programming Languages and Systems}
}

@article{Jung_2018b,
    doi = {10.1017/s0956796818000151},
    url = {https://doi.org/10.1017%2Fs0956796818000151},
    year = 2018,
    publisher = {Cambridge University Press ({CUP})},
    volume = {28},
    author = {RALF JUNG and ROBBERT KREBBERS and JACQUES-HENRI JOURDAN and ALE{\v{S}} BIZJAK and LARS BIRKEDAL and DEREK DREYER},
    title = {Iris from the ground up: A modular foundation for higher-order concurrent separation logic},
    titleaddon = {``Iris 3.1''},
    journal = {Journal of Functional Programming}
}

@article{Chlipala_2011,
    doi = {10.1145/1993316.1993526},
    url = {https://doi.org/10.1145%2F1993316.1993526},
    year = 2011,
    month = 6,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {46},
    number = {6},
    pages = {234--245},
    author = {Adam Chlipala},
    title = {Mostly-automated verification of low-level programs in computational separation logic},
    journal = {{ACM} {SIGPLAN} Notices}
}

@article{Wang_2014,
    doi = {10.1145/2714064.2660201},
    url = {https://doi.org/10.1145%2F2714064.2660201},
    year = 2014,
    month = 12,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {49},
    number = {10},
    pages = {675--690},
    author = {Peng Wang and Santiago Cuellar and Adam Chlipala},
    title = {Compiler verification meets cross-language linking via data abstraction},
    journal = {{ACM} {SIGPLAN} Notices}
}

@inproceedings{Chlipala_2015,
    doi = {10.1145/2676726.2677003},
    url = {https://doi.org/10.1145%2F2676726.2677003},
    year = 2015,
    month = 1,
    publisher = {{ACM}},
    author = {Adam Chlipala},
    title = {From Network Interface to Multithreaded Web Applications},
    booktitle = {Proceedings of the 42nd Annual {ACM} {SIGPLAN}-{SIGACT} Symposium on Principles of Programming Languages}
}

@inproceedings{Nanevski08ynot:reasoning,
    author = {Aleksandar Nanevski and Greg Morrisett and Avi Shinnar and Paul Govereau and Lars Birkedal},
    title = {Ynot: Reasoning with the awkward squad},
    booktitle = {In ACM SIGPLAN International Conference on Functional Programming},
    year = {2008}
}

@article{Leroy-Compcert-CACM,
    author = {Xavier Leroy},
    title = {Formal verification of a realistic compiler},
    journal = {Communications of the ACM},
    year = 2009,
    volume = 52,
    number = 7,
    pages = {107--115},
    url = {http://xavierleroy.org/publi/compcert-CACM.pdf},
    urlpublisher = {http://doi.acm.org/10.1145/1538788.1538814},
    hal = {http://hal.archives-ouvertes.fr/inria-00415861/},
    pubkind = {journal-int-mono},
    abstract = {This paper reports on the development and formal verification (proof of semantic preservation) of CompCert, a compiler from Clight (a large subset of the C programming language) to PowerPC assembly code, using the Coq proof assistant both for programming the compiler and for proving its correctness.  Such a verified compiler is useful in the context of critical software and its formal verification: the verification of the compiler guarantees that the safety properties proved on the source code hold for the executable compiled code as well.}
}

@inproceedings{Kastner-LBSSF-2017,
    title = {Closing the gap -- The formally verified optimizing compiler {CompCert}},
    author = {K{\"a}stner, Daniel and Leroy, Xavier and Blazy, Sandrine and Schommer, Bernhard and Schmidt, Michael and Ferdinand, Christian},
    urllocal = {http://xavierleroy.org/publi/compcert-SSS2017.pdf},
    hal = {https://hal.inria.fr/hal-01399482},
    urlpublisher = {http://scsc.org.uk/p135},
    booktitle = {SSS'17: Developments in System Safety Engineering: Proceedings of the Twenty-fifth Safety-critical Systems Symposium},
    year = {2017},
    publisher = {CreateSpace},
    pages = {163--180},
    xtopic = {compcert},
    abstract = {CompCert is the first commercially available optimizing compiler that is formally verified, using machine-assisted mathematical proofs, to be free from miscompilation. The executable code it produces is proved to behave exactly as specified by the semantics of the source C program. CompCert's intended use is the compilation of safety-critical and mission-critical software meeting high levels of assurance. This article gives an overview of the design of CompCert and its proof concept, summarizes the resulting confidence argument, and gives an overview of relevant tool qualification strategies. We briefly summarize practical experience and give an overview of recent CompCert developments.}
}

@inproceedings{Leroy-BKSPF-2016,
    author = {Xavier Leroy and Sandrine Blazy and Daniel K\"astner and Bernhard Schommer and Markus Pister and Christian Ferdinand},
    title = {CompCert -- A Formally Verified Optimizing Compiler},
    booktitle = {ERTS 2016: Embedded Real Time Software and Systems},
    publisher = {SEE},
    year = 2016,
    url = {http://xavierleroy.org/publi/erts2016_compcert.pdf},
    hal = {https://hal.inria.fr/hal-01238879},
    xtopic = {compcert},
    abstract = {CompCert is the first commercially available optimizing compiler that is formally verified, using machine-assisted mathematical proofs, to be exempt from mis-compilation. The executable code it produces is proved to behave exactly as specified by the semantics of the source C program. This article gives an overview of the design of CompCert and its proof concept and then focuses on aspects relevant for industrial application. We briefly summarize practical experience and give an overview of recent CompCert development aiming at industrial usage. CompCert’s intended use is the compilation of life-critical and mission-critical software meeting high levels of assurance. In this context tool qualification is of paramount importance. We summarize the confidence argument of CompCert and give an overview of relevant qualification strategies.}
}

@article{Thompson_1984,
    doi = {10.1145/358198.358210},
    url = {https://doi.org/10.1145%2F358198.358210},
    year = 1984,
    month = 8,
    publisher = {Association for Computing Machinery ({ACM})},
    volume = {27},
    number = {8},
    pages = {761--763},
    author = {Ken Thompson},
    title = {Reflections on trusting trust},
    journal = {Communications of the {ACM}}
}
